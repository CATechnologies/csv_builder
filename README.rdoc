= CSV Builder

The CSV Builder Rails plugin provides a simple templating system for serving
dynamically generated CSV files from your application.

== Requirements

CSV Builder requires Rails v2.1-2.3.x for Ruby 1.8.x or Rails v2.3.6 for Ruby 1.9.x

If you run Ruby 1.8.6/7 it also depends upon the FasterCSV gem, which you can install with

  $ sudo gem install fastercsv

Encoding conversions are done with Iconv, so make sure you have it on your
development/production machine.

== Install

=== Install as gem (recommended)

Install as a gem:

  $ gem install csv_builder

Then add the gem dependency in your config:

  # config/environment.rb
  config.gem "csv_builder"

== Example

CSV template files are suffixed with '.csv.csvbuilder', for example 'index.csv.csvbuilder'

Add rows to your CSV file in the template by pushing arrays of columns into the
csv object.

   # First row
   csv << [ 'cell 1', 'cell 2' ]
   # Second row
   csv << [ 'another cell value', 'and another' ]
   # etc...

You can set the default filename for that a browser will use for 'save as' by
setting <tt>@filename</tt> instance variable in your controller's action method
e.g.

  @filename = 'report.csv'

You can set the input encoding and output encoding by setting
<tt>@input_encoding</tt> and <tt>@output_encoding</tt> instance variables.
These default to 'UTF-8' and 'LATIN1' respectively. e.g.

  @output_encoding = 'UTF-8'

You can set <tt>@csv_options</tt> instance variable to define options for FasterCSV 
generator. For example: 

  @csv_options = { :force_quotes => true, :col_sep => ';' }

You can respond with csv in your controller as well:

  respond_to do |format|
    format.html
    format.csv # make sure you have action_name.csv.csvbuilder template in place
  end 

You can also attach a csv file to mail sent out by your application by
including a snippet like the following in your mailer method

  attachment "text/csv" do |attachment|
    attachment.body = render(:file => 'example/index.csv.csvbuilder')
    attachment.filename = 'report.csv'
  end


== Troubleshooting

There's a known bug of encoding error in Ruby 1.9 and Rails 2.3.5 
For more details see https://rails.lighthouseapp.com/projects/8994/tickets/2188-i18n-fails-with-multibyte-strings-in-ruby-19-similar-to-2038
This ticket is marked to be solved in Rails 2.3.6


Copyright (c) 2008 Econsultancy.com and 2009 Vidmantas Kabo≈°is, released under the MIT license
